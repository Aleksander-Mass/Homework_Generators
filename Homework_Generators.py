# Пункты задачи:
###  1. Напишите функцию-генератор all_variants(text).

'''
Для решения задачи нужно создать функцию-генератор, которая будет возвращать все возможные подпоследовательности строки.
Это включает одиночные символы, а также последовательные комбинации символов, которые могут быть получены из переданной строки.

Логика работы функции:

1. Для каждой позиции в строке мы можем начать новую подпоследовательность.
2. Мы можем расширять эту подпоследовательность на один символ в каждую следующую итерацию.
3. Для генерации последовательностей будем использовать два вложенных цикла:
   - Внешний цикл будет выбирать начальный символ.
   - Внутренний цикл будет увеличивать длину подпоследовательности, начиная с текущего символа.

Теперь реализуем функцию:
'''
def all_variants(text):
    # Внешний цикл по каждому символу в строке
    for i in range(len(text)):
        # Внутренний цикл создает подпоследовательности, начиная с текущего символа
        for j in range(i + 1, len(text) + 1):
            # Возвращаем текущую подпоследовательность
            yield text[i:j]

# Пример использования:
a = all_variants("abc")
for i in a:
    print(i)

### 2. Опишите логику работы внутри функции all_variants.
'''
Пояснение:
Внешний цикл (for i in range(len(text))) перебирает позиции символов строки, начиная с которых будут генерироваться 
подпоследовательности.
Внутренний цикл (for j in range(i + 1, len(text) + 1)) перебирает длины этих подпоследовательностей.
В каждой итерации внутреннего цикла срез строки text[i:j] возвращает текущую подпоследовательность.
Оператор yield используется для генерации этих последовательностей по мере необходимости.
'''
# Вывод на консоль:
# a
# ab
# abc
# b
# bc
# c